endpoints:
  createBlogPost:
    path: /blog/posts
    method: POST
    description: Creates a new blog post
    parameters:
      - in: body
        name: post
        schema:
          $ref: '#/components/schemas/BlogPost'
    responses:
      - status: 201
        description: Blog post created successfully
      - status: 400
        description: Invalid request
      - status: 500
        description: Unexpected error

  getBlogPosts:
    path: /blog/posts
    method: GET
    description: Retrieves a list of all blog posts
    parameters:
      - in: query
        name: limit
        schema:
          type: integer
        description: The number of posts to return
      - in: query
        name: offset
        schema:
          type: integer
        description: The offset for pagination
    responses:
      - status: 200
        description: A JSON array of blog post objects
      - status: 500
        description: Unexpected error

  getBlogPostById:
    path: /blog/posts/{postId}
    method: GET
    description: Retrieves a blog post by ID
    parameters:
      - in: path
        name: postId
        schema:
          type: integer
        description: The ID of the post to retrieve
    responses:
      - status: 200
        description: A JSON object of a blog post
      - status: 404
        description: Post not found
      - status: 500
        description: Unexpected error

  updateBlogPost:
    path: /blog/posts/{postId}
    method: PUT
    description: Updates a blog post
    parameters:
      - in: path
        name: postId
        schema:
          type: integer
        description: The ID of the post to update
      - in: body
        name: post
        schema:
          $ref: '#/components/schemas/BlogPost'
    responses:
      - status: 200
        description: Blog post updated successfully
      - status: 400
        description: Invalid request
      - status: 404
        description: Post not found
      - status: 500
        description: Unexpected error

  deleteBlogPost:
    path: /blog/posts/{postId}
    method: DELETE
    description: Deletes a blog post
    parameters:
      - in: path
        name: postId
        schema:
          type: integer
        description: The ID of the post to delete
    responses:
      - status: 204
        description: Blog post deleted successfully
      - status: 404
        description: Post not found
      - status: 500
        description: Unexpected error